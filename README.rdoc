= Radix

* home: http://rubyworks.github.com/radix
* code: http://github.com/rubyworks/radix


== DESCRIPTION

Radix provides the means of converting to and from any base.

In addition, representational notations need not be in
ASCII order --any user-defined notation can be used up to
base 62.


== FEATURES/ISSUES

* Convert to and from any base.
* Define custom character sets.
* Can be used to encode/decode strings.
* Very intuitive API.


== RELEASE NOTES

Please see the HISTORY.rdoc file.


== SYNOPSIS

Base conversions with ASCII ordered notations are easy in Ruby.

  255.to_s(16)   #=> "FF"
  "FF".to_i(16)  #=> 255

But Ruby reaches it's limit at base 36.

  255.to_s(37)   #=> Error

Radix provides the means of converting to and from any base.

For example, a number in base 256 can be represented by the array [100, 10]
(ie. 100**256 + 10**1) and can be convert to base 10.

  [100,10].b(256).to_a(10)  #=> [2,5,6,1,0]

Or, to get a string representation for any base upto 62.

  [100,10].b(256).to_s(10)  #=> "25610"

A string representation of anumber can be converted too, again,
upto base 62.

  "10".b(62).to_s(10)  #=> "62"

To use a custom character set, use an array of characters as the base
rather than an integer. For example we can convert a base 10 number
to another base 10 number using a different encoding.

  base = [:Q, :W, :E, :R, :T, :Y, :U, :I, :O, :U]

  "10".b(10).to_a(base)  #=> [:W, :Q]

To learn more have a look at the {QED}[http://rubyworks.github.com/radix/docs/qed].

== HOW TO INSTALL

To install with RubyGems simply open a console and type:

  $ gem install radix

Radix follows {Ruby Setup}[http://rubyworks.github.com/setup] package standard.


== LICENSE/COPYRIGHT

Copyright (c) 2009 Thomas Sawyer

This program is ditributed unser the terms of the Apache 2.0 license.

See LICENSE file for details.
